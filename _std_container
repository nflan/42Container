Creation stack<int> c1 avec size = 0

c1 max_size = 2305843009213693951
c1 Empty: true
c1 size = 0
c1 capacity = 0
push(1) on c1
c1 size = 1
c1 capacity = 1
push(2) on c1
c1 size = 2
c1 capacity = 2
push(3) on c1
c1[0] = 1
c1 size = 3
c1 capacity = 4

c4 size = 2
c4 capacity = 2
 --> c1[0] = 1
 --> c4[0] = 2
 --> c1[1] = 2
 --> c4[1] = 3
c3 size = 30
c3 capacity = 30
Assign tests
push(3) on c1
push(4) on c1
push(5) on c1
push(6) on c1
push(7) on c1
push(8) on c1
push(9) on c1
push(10) on c1
 --> c1[0] = 1
 --> c1[1] = 2
 --> c1[2] = 3
 --> c1[3] = 3
 --> c1[4] = 4
 --> c1[5] = 5
 --> c1[6] = 6
 --> c1[7] = 7
 --> c1[8] = 8
 --> c1[9] = 9
c1 size = 11
c1 capacity = 16
 --> c1[0] = 2
 --> c1[1] = 2
 --> c1[2] = 2
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 5
 --> c1[6] = 6
 --> c1[7] = 7
 --> c1[8] = 8
 --> c1[9] = 9
c1 size = 5
c1 capacity = 16
c1 reserve(20)
 --> c1[0] = 2
 --> c1[1] = 2
 --> c1[2] = 2
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 0
 --> c1[6] = 0
 --> c1[7] = 0
 --> c1[8] = 0
 --> c1[9] = 0
c1 size = 5
c1 capacity = 20

Assign avec iterators c3.begin et c3.begin+3
 --> c3[0] = 20
 --> c3[1] = 20
 --> c3[2] = 20
 --> c3[3] = 20
 --> c3[4] = 20
 --> c3[5] = 20
 --> c3[6] = 20
c3 size = 30
c3 capacity = 30
 --> c1[0] = 20
 --> c1[1] = 20
 --> c1[2] = 20
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 0
 --> c1[6] = 0
c1 size = 3
c1 capacity = 20

Test erase avec c2 = 012346789
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 2
 --> c2[3] = 3
 --> c2[4] = 4
 --> c2[5] = 5
 --> c2[6] = 6
 --> c2[7] = 7
 --> c2[8] = 8
 --> c2[9] = 9
c2.erase begin() + 2
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 3
 --> c2[3] = 4
 --> c2[4] = 5
 --> c2[5] = 6
 --> c2[6] = 7
 --> c2[7] = 8
 --> c2[8] = 9
c2.erase begin + 2 to begin + 4
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 5
 --> c2[3] = 6
 --> c2[4] = 7
 --> c2[5] = 8
 --> c2[6] = 9
c2.erase begin() to end()

Test insert avec c2 = 012346789
{ 20 20 20 }  et c2.capacity() = 10 et size = 10
c2.insert(begin() + 2, 5): { 0 1 5 2 3 4 5 6 7 8 9 } 
c2.capacity() = 20 et size = 11
c2.insert(end(), 100): { 0 1 5 2 3 4 5 6 7 8 9 100 } 
c2.capacity() = 20 et size = 12

Creation d'un vector avec iterators begin + 2 / end - 2 de c2
{ 5 2 3 4 5 6 7 8 } 
c5.capacity() = 8 et size = 8

Insertion a c5[1] de c2[5] a c2[20]
{ 5 4 5 6 7 8 9 100 0 0 0 0 0 0 0 0 2 3 4 5 6 7 8 } 
c5.capacity() = 23 et size = 23

vct2 = { 2 3 4 5 6 7 8 9 100 } vct2.capacity() = 9 et size = 9
c2.insert(c2.end() - 3, 10, -2): { 0 1 5 2 3 4 5 6 7 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 8 9 100 } 
c2.capacity() = 24 et size = 22
c2.insert(c2.end(), 2, 100): { 0 1 5 2 3 4 5 6 7 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 8 9 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 } 
c2.capacity() = 122 et size = 122

Creation d'un vector avec iterators begin + 2 / end - 2 de c2
{ 5 2 3 4 5 6 7 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 8 9 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 } 
c3.capacity() = 118 et size = 118

Creation d'un vector NULL puis association de c3 par operator =
{ 5 2 3 4 5 6 7 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 8 9 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 } 
c4.capacity() = 118 et size = 118

C4 = C2
{ 0 1 5 2 3 4 5 6 7 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 8 9 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 } 
c4.capacity() = 122 et size = 122

Insertion a c5[-1] de c2[20] a c2[10]

Test swap
a1.capacity = 4 et a1.size = 3
a2.capacity = 2 et a2.size = 2
{ 1 2 3 } { 4 5 } 2 5 1 4
{ 4 5 } { 1 2 3 } 2 5 1 4
a1.capacity = 2 et a1.size = 2
a2.capacity = 4 et a2.size = 3

Test resize
Le vector contient: { 1 2 3 } 
Apres resize up a 5 (initializer = 3): { 1 2 3 3 3 } 
Apres resize down a 2 (initializer = 2): { 1 2 } 
Apres resize up a 7 (initializer = 4): { 1 2 4 4 4 4 4 } 
Apres resize up a 10 (initializer = 4): { 1 2 4 4 4 4 4 100 100 100 } 

Test at
c = { 0 1 2 3 4 5 6 7 8 9 } 
c.at(2) = 2
c.front() = 0
c.back() = 9

creation de c2 par copie de c1

c1 capacity = 20
c1 size = 3
c2 capacity = 3
c2 size = 3
c2 Empty: false
push(5) on c2
c2 size = 4
pop() on c2
c2 size = 3
pop() on c2
c2 size = 2
c1 size = 3
pop() on c2
c2 size = 1
pop() on c2
c2 size = 0

Operators avec c1 == c2
c1 capacity = 20
c2 capacity = 6

c1 == c2 ?	true
c1 != c2 ?	false
c1 < c2 ?	false
c1 <= c2 ?	true
c1 > c2 ?	false
c1 >= c2 ?	true

Operators avec c1 > c2

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	false
c1 <= c2 ?	false
c1 > c2 ?	true
c1 >= c2 ?	true

Operators avec c1 < c2

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	true
c1 <= c2 ?	true
c1 > c2 ?	false
c1 >= c2 ?	false

Operators avec c1 == c2

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	false
c1 <= c2 ?	false
c1 > c2 ?	true
c1 >= c2 ?	true

r/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x404CF8: dovector() (main.cpp:136)
==464136==    by 0x4027D4: main (main.cpp:49)
==464136== 
==464136== Conditional jump or move depends on uninitialised value(s)
==464136==    at 0x49A393E: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x409215: std::ostream& operator<< <std::ostream, std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<int, std::allocator<int> > const&) (vector.hpp:521)
==464136==    by 0x405F3A: dovector() (main.cpp:190)
==464136==    by 0x4027D4: main (main.cpp:49)
==464136== 
==464136== Use of uninitialised value of size 8
==464136==    at 0x49A381B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49A3968: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x409215: std::ostream& operator<< <std::ostream, std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<int, std::allocator<int> > const&) (vector.hpp:521)
==464136==    by 0x405F3A: dovector() (main.cpp:190)
==464136==    by 0x4027D4: main (main.cpp:49)
==464136== 
==464136== Conditional jump or move depends on uninitialised value(s)
==464136==    at 0x49A382D: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49A3968: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x409215: std::ostream& operator<< <std::ostream, std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<int, std::allocator<int> > const&) (vector.hpp:521)
==464136==    by 0x405F3A: dovector() (main.cpp:190)
==464136==    by 0x4027D4: main (main.cpp:49)
==464136== 
==464136== Conditional jump or move depends on uninitialised value(s)
==464136==    at 0x49A399E: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==464136==    by 0x409215: std::ostream& operator<< <std::ostream, std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<int, std::allocator<int> > const&) (vector.hpp:521)
==464136==    by 0x405F3A: dovector() (main.cpp:190)
==464136==    by 0x4027D4: main (main.cpp:49)
==464136== 
==464136== 
==464136== HEAP SUMMARY:
==464136==     in use at exit: 0 bytes in 0 blocks
==464136==   total heap usage: 51 allocs, 51 frees, 84,224 bytes allocated
==464136== 
==464136== All heap blocks were freed -- no leaks are possible
==464136== 
==464136== Use --track-origins=yes to see where uninitialised values come from
==464136== For lists of detected and suppressed errors, rerun with: -s
==464136== ERROR SUMMARY: 60 errors from 12 contexts (suppressed: 0 from 0)
