[33m-----------VECTOR------------[39m

[32mTEST CAPACITY[39m
c1 max_size = 2305843009213693951
c1 Empty: true
c1 size = 0
c1 capacity = 0
[34mpush(1) on c1[39m
c1 size = 1
c1 capacity = 1
[34mpush(2) on c1[39m
c1 size = 2
c1 capacity = 2
[34mpush(3) on c1[39m
c1[0] = 1
c1 size = 3
c1 capacity = 4


[35mTEST constructeur par iterator[39m
c4 size = 2
c4 capacity = 2
 --> c1[0] = 1
 --> c4[0] = 2
 --> c1[1] = 2
 --> c4[1] = 3


[35mTEST constructeur avec infos[39m
c3 size = 30
c3 capacity = 30

[32mTEST ASSIGN[34m
push(3) on c1
push(4) on c1
push(5) on c1
push(6) on c1
push(7) on c1
push(8) on c1
push(9) on c1
push(10) on c1
[39m
 --> c1[0] = 1
 --> c1[1] = 2
 --> c1[2] = 3
 --> c1[3] = 3
 --> c1[4] = 4
 --> c1[5] = 5
 --> c1[6] = 6
 --> c1[7] = 7
 --> c1[8] = 8
 --> c1[9] = 9
c1 size = 11
c1 capacity = 16
[34mAssign avec 5 x 2[39m
 --> c1[0] = 2
 --> c1[1] = 2
 --> c1[2] = 2
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 5
 --> c1[6] = 6
 --> c1[7] = 7
 --> c1[8] = 8
 --> c1[9] = 9
c1 size = 5
c1 capacity = 16

[32mTEST RESERVE[39m
[34mc1 reserve(20)[39m
 --> c1[0] = 2
 --> c1[1] = 2
 --> c1[2] = 2
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 0
 --> c1[6] = 0
 --> c1[7] = 0
 --> c1[8] = 0
 --> c1[9] = 0
c1 size = 5
c1 capacity = 20

 --> c3[0] = 20
 --> c3[1] = 20
 --> c3[2] = 20
 --> c3[3] = 20
 --> c3[4] = 20
 --> c3[5] = 20
 --> c3[6] = 20
c3 size = 30
c3 capacity = 30

[34mAssign avec iterators c3.begin et c3.begin+3[39m
 --> c1[0] = 20
 --> c1[1] = 20
 --> c1[2] = 20
 --> c1[3] = 2
 --> c1[4] = 2
 --> c1[5] = 0
 --> c1[6] = 0
c1 size = 3
c1 capacity = 20

[32mTEST ERASE[39m
[34mErase avec c2 = 012346789[39m
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 2
 --> c2[3] = 3
 --> c2[4] = 4
 --> c2[5] = 5
 --> c2[6] = 6
 --> c2[7] = 7
 --> c2[8] = 8
 --> c2[9] = 9
[34mc2.erase begin() + 2[39m
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 3
 --> c2[3] = 4
 --> c2[4] = 5
 --> c2[5] = 6
 --> c2[6] = 7
 --> c2[7] = 8
 --> c2[8] = 9
[34mc2.erase begin + 2 to begin + 4[39m
 --> c2[0] = 0
 --> c2[1] = 1
 --> c2[2] = 5
 --> c2[3] = 6
 --> c2[4] = 7
 --> c2[5] = 8
 --> c2[6] = 9
[34mc2.erase begin() to end()[39m


[32mTEST INSERT[39m
[34minsert avec c2 = 012346789[39m
{ 0; 1; 2; 3; 4; 5; 6; 7; 8; 9 }  et c2.capacity() = 10 et size = 10
[34mc2.insert(begin() + 2, 5): [39m{ 0; 1; 5; 2; 3; 4; 5; 6; 7; 8; 9 } 
c2.capacity() = 20 et size = 11
[34mc2.insert(end(), 100): [39m{ 0; 1; 5; 2; 3; 4; 5; 6; 7; 8; 9; 100 } 
c2.capacity() = 20 et size = 12

[35mCreation d'un vector avec iterators begin + 2 / end - 2 de c2[39m
{ 5; 2; 3; 4; 5; 6; 7; 8 } 
c5.capacity() = 8 et size = 8

[34mInsertion a c5[1] de c2[5] a c2[20][39m
{ 5; 4; 5; 6; 7; 8; 9; 100; 0; 0; 0; 0; 0; 0; 0; 0; 2; 3; 4; 5; 6; 7; 8 } 
c5.capacity() = 23 et size = 23

[34mc2.insert(c2.end() - 3, 10, -2): [39m{ 0; 1; 5; 2; 3; 4; 5; 6; 7; 8; 9; 100 } 
c2.capacity() = 24 et size = 22
[34mc2.insert(c2.end(), 2, 100): [39m{ 0; 1; 5; 2; 3; 4; 5; 6; 7; -2; -2; -2; -2; -2; -2; -2; -2; -2; -2; 8; 9; 100 } 
c2.capacity() = 122 et size = 122

[35mCreation d'un vector avec iterators begin + 2 / end - 2 de c2[39m
{ 5; 2; 3; 4; 5; 6; 7; -2; -2; -2; -2; -2; -2; -2; -2; -2; -2; 8; 9; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100 } 
c3.capacity() = 118 et size = 118

[35mCreation d'un vector NULL puis association de c3 par operator =[39m
{ 5; 2; 3; 4; 5; 6; 7; -2; -2; -2; -2; -2; -2; -2; -2; -2; -2; 8; 9; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100 } 
c4.capacity() = 118 et size = 118

[34mC4 = C2[39m
{ 0; 1; 5; 2; 3; 4; 5; 6; 7; -2; -2; -2; -2; -2; -2; -2; -2; -2; -2; 8; 9; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100; 100 } 
c4.capacity() = 122 et size = 122

[34mInsertion a c5[-1] de c2[20] a c2[10][39m

[32mTEST SWAP[39m
a1.capacity = 4 et a1.size = 3
a2.capacity = 2 et a2.size = 2
{ 1; 2; 3 } { 4; 5 } 2 5 1 4
[34mswap a1 et a2[39m
{ 4; 5 } { 1; 2; 3 } 2 5 1 4
a1.capacity = 2 et a1.size = 2
a2.capacity = 4 et a2.size = 3

[32mTEST RESIZE[39m
[35mLe vector contient: [39m{ 1; 2; 3 } 
[34mApres resize up a 5 (initializer = 3): [39m{ 1; 2; 3; 3; 3 } 
[34mApres resize down a 2 (initializer = 2): [39m{ 1; 2 } 
[34mApres resize up a 7 (initializer = 4): [39m{ 1; 2; 4; 4; 4; 4; 4 } 
[34mApres resize up a 10 (initializer = 4): [39m{ 1; 2; 4; 4; 4; 4; 4; 100; 100; 100 } 

[32mTEST AT[39m
c = { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9 } 
c.at(2) = 2
c.front() = 0
c.back() = 9

[35mcreation de c2 par copie de c1[39m

c1 capacity = 20
c1 size = 3
c2 capacity = 3
c2 size = 3
c2 Empty: false
[34mpush(5) on c2[39m
c2 size = 4
[34mpop() on c2[39m
c2 size = 3
[34mpop() on c2[39m
c2 size = 2
c1 size = 3
[34mpop() on c2[39m
c2 size = 1
[34mpop() on c2[39m
c2 size = 0

[35mOperators avec c1 == c2[39m
c1 capacity = 20
c2 capacity = 6

c1 == c2 ?	true
c1 != c2 ?	false
c1 < c2 ?	false
c1 <= c2 ?	true
c1 > c2 ?	false
c1 >= c2 ?	true

[35mOperators avec c1 > c2[39m

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	false
c1 <= c2 ?	false
c1 > c2 ?	true
c1 >= c2 ?	true

[35mOperators avec c1 < c2[39m

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	true
c1 <= c2 ?	true
c1 > c2 ?	false
c1 >= c2 ?	false

[35mOperators avec c1 == c2[39m

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	false
c1 <= c2 ?	false
c1 > c2 ?	true
c1 >= c2 ?	true


[32mTEST REVERSE ITERATOR[39m
{ 0; 1; 2; 3; 4; 5; 6; 7; 8; 9 }  et c2.capacity() = 10 et size = 10
[35mcreation reverse iterator rbegin = [39m9
[35mcreation reverse iterator rend = [39m0
[34m
comparaison de rev_ite et rev_it[39m

c1 == c2 ?	false
c1 != c2 ?	true
c1 < c2 ?	true
c1 <= c2 ?	true
c1 > c2 ?	false
c1 >= c2 ?	false

49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x412ACB: std::ostream& operator<< <std::ostream, int>(std::ostream&, std::vector<int, std::allocator<int> > const&) (main.cpp:40)
==191987==    by 0x4072A9: dovector(color) (main.cpp:615)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987== 
==191987== Use of uninitialised value of size 8
==191987==    at 0x49A381B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x49A3968: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x412ACB: std::ostream& operator<< <std::ostream, int>(std::ostream&, std::vector<int, std::allocator<int> > const&) (main.cpp:40)
==191987==    by 0x4072A9: dovector(color) (main.cpp:615)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987== 
==191987== Conditional jump or move depends on uninitialised value(s)
==191987==    at 0x49A382D: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x49A3968: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x412ACB: std::ostream& operator<< <std::ostream, int>(std::ostream&, std::vector<int, std::allocator<int> > const&) (main.cpp:40)
==191987==    by 0x4072A9: dovector(color) (main.cpp:615)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987== 
==191987== Conditional jump or move depends on uninitialised value(s)
==191987==    at 0x49A399E: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x49B20E9: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==191987==    by 0x412ACB: std::ostream& operator<< <std::ostream, int>(std::ostream&, std::vector<int, std::allocator<int> > const&) (main.cpp:40)
==191987==    by 0x4072A9: dovector(color) (main.cpp:615)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987== 
==191987== Invalid read of size 4
==191987==    at 0x40A71C: dovector(color) (main.cpp:784)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987==  Address 0x4de86fc is 4 bytes before a block of size 40 alloc'd
==191987==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==191987==    by 0x41507F: std::__new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:137)
==191987==    by 0x415010: __gnu_cxx::__alloc_traits<std::allocator<int>, int>::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:133)
==191987==    by 0x419A3F: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:378)
==191987==    by 0x41963B: std::vector<int, std::allocator<int> >::_M_realloc_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (vector.tcc:453)
==191987==    by 0x4115AC: std::vector<int, std::allocator<int> >::push_back(int const&) (stl_vector.h:1287)
==191987==    by 0x40A303: dovector(color) (main.cpp:777)
==191987==    by 0x402ADB: main (main.cpp:79)
==191987== 
==191987== 
==191987== HEAP SUMMARY:
==191987==     in use at exit: 0 bytes in 0 blocks
==191987==   total heap usage: 52 allocs, 52 frees, 84,248 bytes allocated
==191987== 
==191987== All heap blocks were freed -- no leaks are possible
==191987== 
==191987== Use --track-origins=yes to see where uninitialised values come from
==191987== For lists of detected and suppressed errors, rerun with: -s
==191987== ERROR SUMMARY: 61 errors from 13 contexts (suppressed: 0 from 0)
